{"ast":null,"code":"var _jsxFileName = \"D:\\\\Minor\\\\reactjsCerti\\\\frontend\\\\src\\\\components\\\\UploadCertificate.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useRef, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { createWorker } from 'tesseract.js';\nimport { generateResume } from '../services/openaiService';\nimport './UploadCertificate.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadCertificate = () => {\n  _s();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [jars, setJars] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const navigate = useNavigate();\n  const workerRef = useRef(null);\n\n  // Initialize worker and handle cleanup\n  useEffect(() => {\n    const initializeWorker = async () => {\n      try {\n        const worker = createWorker();\n        workerRef.current = worker;\n\n        // Load and initialize the worker\n        await worker.load();\n        await worker.loadLanguage('eng');\n        await worker.initialize('eng');\n      } catch (error) {\n        console.error(\"Error initializing Tesseract worker:\", error);\n      }\n    };\n    initializeWorker();\n\n    // Cleanup worker when component unmounts\n    return () => {\n      if (workerRef.current) {\n        workerRef.current.terminate();\n      }\n    };\n  }, []);\n\n  // Handle file input change\n  const handleFileChange = event => {\n    const files = Array.from(event.target.files);\n    const validFiles = files.filter(file => /\\.(jpg|jpeg|png)$/i.test(file.name));\n    setSelectedFiles(validFiles);\n    setJars(validFiles.map((file, index) => ({\n      id: index,\n      name: file.name,\n      filled: false,\n      filling: false\n    })));\n  };\n\n  // Extract relevant data from OCR text\n  const extractRelevantInfo = text => {\n    const relevantData = {};\n    const patterns = {\n      name: /(Name|Full Name|Student Name):?\\s*([A-Za-z\\s]+)/i,\n      date: /(Date|Issued on|Date of Issue):?\\s*(\\d{2}\\/\\d{2}\\/\\d{4})/,\n      qualification: /(Qualification|Degree|Course):?\\s*([A-Za-z\\s]+)/i,\n      issuer: /(Issued By|Organization|Institution):?\\s*([A-Za-z\\s]+)/i\n    };\n    Object.entries(patterns).forEach(([key, pattern]) => {\n      const match = text.match(pattern);\n      if (match) relevantData[key] = match[2].trim();\n    });\n    return relevantData;\n  };\n\n  // Handle file upload and OCR processing\n  const handleUpload = useCallback(async () => {\n    if (selectedFiles.length === 0) {\n      alert('Please select a file to upload.');\n      return;\n    }\n    setIsProcessing(true);\n    setProgress(0);\n    const extractedDataArray = [];\n    const worker = workerRef.current;\n    if (!worker) {\n      alert('OCR worker is not initialized');\n      return;\n    }\n    const totalFiles = selectedFiles.length;\n    for (let currentFileIndex = 0; currentFileIndex < totalFiles; currentFileIndex++) {\n      const file = selectedFiles[currentFileIndex];\n      setJars(prevJars => prevJars.map((jar, index) => index === currentFileIndex ? {\n        ...jar,\n        filling: true\n      } : jar));\n      try {\n        // OCR process using Tesseract\n        const {\n          data: {\n            text\n          }\n        } = await worker.recognize(file);\n        const extractedData = extractRelevantInfo(text);\n        extractedDataArray.push(extractedData);\n        setJars(prevJars => prevJars.map((jar, index) => index === currentFileIndex ? {\n          ...jar,\n          filled: true,\n          filling: false\n        } : jar));\n\n        // Update progress bar\n        setProgress(Math.round((currentFileIndex + 1) / totalFiles * 100));\n      } catch (error) {\n        console.error(`Error processing ${file.name}:`, error);\n        setJars(prevJars => prevJars.map((jar, index) => index === currentFileIndex ? {\n          ...jar,\n          filling: false\n        } : jar));\n      }\n    }\n\n    // Generate resume data\n    try {\n      const formattedData = await generateResume({\n        sections: {\n          header: {\n            name: extractedDataArray[0].name || 'Unknown Name',\n            contactInfo: \"email@example.com\"\n          },\n          professionalSummary: \"A motivated individual with experience in XYZ...\",\n          experience: extractedDataArray.map(data => ({\n            jobTitle: data.qualification || 'N/A',\n            company: data.issuer || 'N/A',\n            startDate: data.date || 'N/A',\n            endDate: \"Present\",\n            description: \"Description of role responsibilities.\"\n          })),\n          education: [{\n            degree: \"Bachelor of XYZ\",\n            institution: \"XYZ University\",\n            graduationDate: \"2024\"\n          }],\n          skills: [\"Skill 1\", \"Skill 2\", \"Skill 3\"],\n          certifications: extractedDataArray.map(data => ({\n            certificationName: data.qualification || 'Unknown',\n            issuer: data.issuer || 'Unknown',\n            date: data.date || 'Unknown'\n          })),\n          languages: [\"English\", \"Spanish\"],\n          projects: [{\n            title: \"Project Title\",\n            description: \"Project Description\",\n            technologies: [\"React\", \"Node.js\"]\n          }],\n          volunteerExperience: [{\n            role: \"Volunteer\",\n            organization: \"XYZ Organization\",\n            dates: \"2022 - 2023\",\n            description: \"Description of volunteer work.\"\n          }]\n        }\n      });\n      navigate('/review', {\n        state: {\n          formattedResume: formattedData\n        }\n      });\n    } catch (error) {\n      console.error('Error formatting resume:', error);\n    }\n    setIsProcessing(false);\n    setProgress(100);\n  }, [selectedFiles, navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload Your Certificates\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        multiple: true,\n        accept: \".jpg,.jpeg,.png\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        disabled: isProcessing,\n        children: isProcessing ? 'Processing...' : 'Upload'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), jars.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-container\",\n      children: [jars.map(jar => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"jar\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: jar.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 15\n        }, this), jar.filling && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Processing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 31\n        }, this), jar.filled && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 30\n        }, this)]\n      }, jar.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress\",\n          style: {\n            width: `${progress}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadCertificate, \"gYs7ugin+0B2r0w+MVGZroukrGs=\", false, function () {\n  return [useNavigate];\n});\n_c = UploadCertificate;\nexport default UploadCertificate;\nvar _c;\n$RefreshReg$(_c, \"UploadCertificate\");","map":{"version":3,"names":["React","useState","useCallback","useRef","useEffect","useNavigate","createWorker","generateResume","jsxDEV","_jsxDEV","UploadCertificate","_s","selectedFiles","setSelectedFiles","jars","setJars","isProcessing","setIsProcessing","progress","setProgress","navigate","workerRef","initializeWorker","worker","current","load","loadLanguage","initialize","error","console","terminate","handleFileChange","event","files","Array","from","target","validFiles","filter","file","test","name","map","index","id","filled","filling","extractRelevantInfo","text","relevantData","patterns","date","qualification","issuer","Object","entries","forEach","key","pattern","match","trim","handleUpload","length","alert","extractedDataArray","totalFiles","currentFileIndex","prevJars","jar","data","recognize","extractedData","push","Math","round","formattedData","sections","header","contactInfo","professionalSummary","experience","jobTitle","company","startDate","endDate","description","education","degree","institution","graduationDate","skills","certifications","certificationName","languages","projects","title","technologies","volunteerExperience","role","organization","dates","state","formattedResume","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","multiple","accept","onChange","onClick","disabled","style","width","_c","$RefreshReg$"],"sources":["D:/Minor/reactjsCerti/frontend/src/components/UploadCertificate.js"],"sourcesContent":["import React, { useState, useCallback, useRef, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { createWorker } from 'tesseract.js';\r\nimport { generateResume } from '../services/openaiService';\r\nimport './UploadCertificate.css';\r\n\r\nconst UploadCertificate = () => {\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n  const [jars, setJars] = useState([]);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const navigate = useNavigate();\r\n  const workerRef = useRef(null);\r\n\r\n  // Initialize worker and handle cleanup\r\n  useEffect(() => {\r\n    const initializeWorker = async () => {\r\n      try {\r\n        const worker = createWorker();\r\n        workerRef.current = worker;\r\n\r\n        // Load and initialize the worker\r\n        await worker.load();\r\n        await worker.loadLanguage('eng');\r\n        await worker.initialize('eng');\r\n      } catch (error) {\r\n        console.error(\"Error initializing Tesseract worker:\", error);\r\n      }\r\n    };\r\n\r\n    initializeWorker();\r\n\r\n    // Cleanup worker when component unmounts\r\n    return () => {\r\n      if (workerRef.current) {\r\n        workerRef.current.terminate();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Handle file input change\r\n  const handleFileChange = (event) => {\r\n    const files = Array.from(event.target.files);\r\n    const validFiles = files.filter(file => /\\.(jpg|jpeg|png)$/i.test(file.name));\r\n    setSelectedFiles(validFiles);\r\n    setJars(validFiles.map((file, index) => ({\r\n      id: index,\r\n      name: file.name,\r\n      filled: false,\r\n      filling: false,\r\n    })));\r\n  };\r\n\r\n  // Extract relevant data from OCR text\r\n  const extractRelevantInfo = (text) => {\r\n    const relevantData = {};\r\n    const patterns = {\r\n      name: /(Name|Full Name|Student Name):?\\s*([A-Za-z\\s]+)/i,\r\n      date: /(Date|Issued on|Date of Issue):?\\s*(\\d{2}\\/\\d{2}\\/\\d{4})/,\r\n      qualification: /(Qualification|Degree|Course):?\\s*([A-Za-z\\s]+)/i,\r\n      issuer: /(Issued By|Organization|Institution):?\\s*([A-Za-z\\s]+)/i,\r\n    };\r\n\r\n    Object.entries(patterns).forEach(([key, pattern]) => {\r\n      const match = text.match(pattern);\r\n      if (match) relevantData[key] = match[2].trim();\r\n    });\r\n\r\n    return relevantData;\r\n  };\r\n\r\n  // Handle file upload and OCR processing\r\n  const handleUpload = useCallback(async () => {\r\n    if (selectedFiles.length === 0) {\r\n      alert('Please select a file to upload.');\r\n      return;\r\n    }\r\n\r\n    setIsProcessing(true);\r\n    setProgress(0);\r\n    const extractedDataArray = [];\r\n\r\n    const worker = workerRef.current;\r\n    if (!worker) {\r\n      alert('OCR worker is not initialized');\r\n      return;\r\n    }\r\n\r\n    const totalFiles = selectedFiles.length;\r\n\r\n    for (let currentFileIndex = 0; currentFileIndex < totalFiles; currentFileIndex++) {\r\n      const file = selectedFiles[currentFileIndex];\r\n      setJars(prevJars => prevJars.map((jar, index) =>\r\n        index === currentFileIndex ? { ...jar, filling: true } : jar\r\n      ));\r\n\r\n      try {\r\n        // OCR process using Tesseract\r\n        const { data: { text } } = await worker.recognize(file);\r\n        const extractedData = extractRelevantInfo(text);\r\n        extractedDataArray.push(extractedData);\r\n\r\n        setJars(prevJars => prevJars.map((jar, index) =>\r\n          index === currentFileIndex ? { ...jar, filled: true, filling: false } : jar\r\n        ));\r\n\r\n        // Update progress bar\r\n        setProgress(Math.round(((currentFileIndex + 1) / totalFiles) * 100));\r\n      } catch (error) {\r\n        console.error(`Error processing ${file.name}:`, error);\r\n        setJars(prevJars => prevJars.map((jar, index) =>\r\n          index === currentFileIndex ? { ...jar, filling: false } : jar\r\n        ));\r\n      }\r\n    }\r\n\r\n    // Generate resume data\r\n    try {\r\n      const formattedData = await generateResume({\r\n        sections: {\r\n          header: {\r\n            name: extractedDataArray[0].name || 'Unknown Name',\r\n            contactInfo: \"email@example.com\",\r\n          },\r\n          professionalSummary: \"A motivated individual with experience in XYZ...\",\r\n          experience: extractedDataArray.map(data => ({\r\n            jobTitle: data.qualification || 'N/A',\r\n            company: data.issuer || 'N/A',\r\n            startDate: data.date || 'N/A',\r\n            endDate: \"Present\",\r\n            description: \"Description of role responsibilities.\",\r\n          })),\r\n          education: [{\r\n            degree: \"Bachelor of XYZ\",\r\n            institution: \"XYZ University\",\r\n            graduationDate: \"2024\",\r\n          }],\r\n          skills: [\"Skill 1\", \"Skill 2\", \"Skill 3\"],\r\n          certifications: extractedDataArray.map(data => ({\r\n            certificationName: data.qualification || 'Unknown',\r\n            issuer: data.issuer || 'Unknown',\r\n            date: data.date || 'Unknown',\r\n          })),\r\n          languages: [\"English\", \"Spanish\"],\r\n          projects: [{\r\n            title: \"Project Title\",\r\n            description: \"Project Description\",\r\n            technologies: [\"React\", \"Node.js\"],\r\n          }],\r\n          volunteerExperience: [{\r\n            role: \"Volunteer\",\r\n            organization: \"XYZ Organization\",\r\n            dates: \"2022 - 2023\",\r\n            description: \"Description of volunteer work.\"\r\n          }],\r\n        },\r\n      });\r\n\r\n      navigate('/review', { state: { formattedResume: formattedData } });\r\n    } catch (error) {\r\n      console.error('Error formatting resume:', error);\r\n    }\r\n\r\n    setIsProcessing(false);\r\n    setProgress(100);\r\n  }, [selectedFiles, navigate]);\r\n\r\n  return (\r\n    <div className=\"upload-container\">\r\n      <h2>Upload Your Certificates</h2>\r\n      <div className=\"upload-area\">\r\n        <input\r\n          type=\"file\"\r\n          multiple\r\n          accept=\".jpg,.jpeg,.png\"\r\n          onChange={handleFileChange}\r\n        />\r\n        <button onClick={handleUpload} disabled={isProcessing}>\r\n          {isProcessing ? 'Processing...' : 'Upload'}\r\n        </button>\r\n      </div>\r\n      {jars.length > 0 && (\r\n        <div className=\"progress-container\">\r\n          {jars.map((jar) => (\r\n            <div key={jar.id} className=\"jar\">\r\n              <span>{jar.name}</span>\r\n              {jar.filling && <span>Processing...</span>}\r\n              {jar.filled && <span>Completed</span>}\r\n            </div>\r\n          ))}\r\n          <div className=\"progress-bar\">\r\n            <div\r\n              className=\"progress\"\r\n              style={{ width: `${progress}%` }}\r\n            ></div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadCertificate;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACvE,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,YAAY,QAAQ,cAAc;AAC3C,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,OAAO,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACe,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAMmB,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAC9B,MAAMgB,SAAS,GAAGlB,MAAM,CAAC,IAAI,CAAC;;EAE9B;EACAC,SAAS,CAAC,MAAM;IACd,MAAMkB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMC,MAAM,GAAGjB,YAAY,CAAC,CAAC;QAC7Be,SAAS,CAACG,OAAO,GAAGD,MAAM;;QAE1B;QACA,MAAMA,MAAM,CAACE,IAAI,CAAC,CAAC;QACnB,MAAMF,MAAM,CAACG,YAAY,CAAC,KAAK,CAAC;QAChC,MAAMH,MAAM,CAACI,UAAU,CAAC,KAAK,CAAC;MAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC9D;IACF,CAAC;IAEDN,gBAAgB,CAAC,CAAC;;IAElB;IACA,OAAO,MAAM;MACX,IAAID,SAAS,CAACG,OAAO,EAAE;QACrBH,SAAS,CAACG,OAAO,CAACM,SAAS,CAAC,CAAC;MAC/B;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;IAClC,MAAMC,KAAK,GAAGC,KAAK,CAACC,IAAI,CAACH,KAAK,CAACI,MAAM,CAACH,KAAK,CAAC;IAC5C,MAAMI,UAAU,GAAGJ,KAAK,CAACK,MAAM,CAACC,IAAI,IAAI,oBAAoB,CAACC,IAAI,CAACD,IAAI,CAACE,IAAI,CAAC,CAAC;IAC7E5B,gBAAgB,CAACwB,UAAU,CAAC;IAC5BtB,OAAO,CAACsB,UAAU,CAACK,GAAG,CAAC,CAACH,IAAI,EAAEI,KAAK,MAAM;MACvCC,EAAE,EAAED,KAAK;MACTF,IAAI,EAAEF,IAAI,CAACE,IAAI;MACfI,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;IACX,CAAC,CAAC,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMC,mBAAmB,GAAIC,IAAI,IAAK;IACpC,MAAMC,YAAY,GAAG,CAAC,CAAC;IACvB,MAAMC,QAAQ,GAAG;MACfT,IAAI,EAAE,kDAAkD;MACxDU,IAAI,EAAE,0DAA0D;MAChEC,aAAa,EAAE,kDAAkD;MACjEC,MAAM,EAAE;IACV,CAAC;IAEDC,MAAM,CAACC,OAAO,CAACL,QAAQ,CAAC,CAACM,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,OAAO,CAAC,KAAK;MACnD,MAAMC,KAAK,GAAGX,IAAI,CAACW,KAAK,CAACD,OAAO,CAAC;MACjC,IAAIC,KAAK,EAAEV,YAAY,CAACQ,GAAG,CAAC,GAAGE,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;IAChD,CAAC,CAAC;IAEF,OAAOX,YAAY;EACrB,CAAC;;EAED;EACA,MAAMY,YAAY,GAAG3D,WAAW,CAAC,YAAY;IAC3C,IAAIU,aAAa,CAACkD,MAAM,KAAK,CAAC,EAAE;MAC9BC,KAAK,CAAC,iCAAiC,CAAC;MACxC;IACF;IAEA9C,eAAe,CAAC,IAAI,CAAC;IACrBE,WAAW,CAAC,CAAC,CAAC;IACd,MAAM6C,kBAAkB,GAAG,EAAE;IAE7B,MAAMzC,MAAM,GAAGF,SAAS,CAACG,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;MACXwC,KAAK,CAAC,+BAA+B,CAAC;MACtC;IACF;IAEA,MAAME,UAAU,GAAGrD,aAAa,CAACkD,MAAM;IAEvC,KAAK,IAAII,gBAAgB,GAAG,CAAC,EAAEA,gBAAgB,GAAGD,UAAU,EAAEC,gBAAgB,EAAE,EAAE;MAChF,MAAM3B,IAAI,GAAG3B,aAAa,CAACsD,gBAAgB,CAAC;MAC5CnD,OAAO,CAACoD,QAAQ,IAAIA,QAAQ,CAACzB,GAAG,CAAC,CAAC0B,GAAG,EAAEzB,KAAK,KAC1CA,KAAK,KAAKuB,gBAAgB,GAAG;QAAE,GAAGE,GAAG;QAAEtB,OAAO,EAAE;MAAK,CAAC,GAAGsB,GAC3D,CAAC,CAAC;MAEF,IAAI;QACF;QACA,MAAM;UAAEC,IAAI,EAAE;YAAErB;UAAK;QAAE,CAAC,GAAG,MAAMzB,MAAM,CAAC+C,SAAS,CAAC/B,IAAI,CAAC;QACvD,MAAMgC,aAAa,GAAGxB,mBAAmB,CAACC,IAAI,CAAC;QAC/CgB,kBAAkB,CAACQ,IAAI,CAACD,aAAa,CAAC;QAEtCxD,OAAO,CAACoD,QAAQ,IAAIA,QAAQ,CAACzB,GAAG,CAAC,CAAC0B,GAAG,EAAEzB,KAAK,KAC1CA,KAAK,KAAKuB,gBAAgB,GAAG;UAAE,GAAGE,GAAG;UAAEvB,MAAM,EAAE,IAAI;UAAEC,OAAO,EAAE;QAAM,CAAC,GAAGsB,GAC1E,CAAC,CAAC;;QAEF;QACAjD,WAAW,CAACsD,IAAI,CAACC,KAAK,CAAE,CAACR,gBAAgB,GAAG,CAAC,IAAID,UAAU,GAAI,GAAG,CAAC,CAAC;MACtE,CAAC,CAAC,OAAOrC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,oBAAoBW,IAAI,CAACE,IAAI,GAAG,EAAEb,KAAK,CAAC;QACtDb,OAAO,CAACoD,QAAQ,IAAIA,QAAQ,CAACzB,GAAG,CAAC,CAAC0B,GAAG,EAAEzB,KAAK,KAC1CA,KAAK,KAAKuB,gBAAgB,GAAG;UAAE,GAAGE,GAAG;UAAEtB,OAAO,EAAE;QAAM,CAAC,GAAGsB,GAC5D,CAAC,CAAC;MACJ;IACF;;IAEA;IACA,IAAI;MACF,MAAMO,aAAa,GAAG,MAAMpE,cAAc,CAAC;QACzCqE,QAAQ,EAAE;UACRC,MAAM,EAAE;YACNpC,IAAI,EAAEuB,kBAAkB,CAAC,CAAC,CAAC,CAACvB,IAAI,IAAI,cAAc;YAClDqC,WAAW,EAAE;UACf,CAAC;UACDC,mBAAmB,EAAE,kDAAkD;UACvEC,UAAU,EAAEhB,kBAAkB,CAACtB,GAAG,CAAC2B,IAAI,KAAK;YAC1CY,QAAQ,EAAEZ,IAAI,CAACjB,aAAa,IAAI,KAAK;YACrC8B,OAAO,EAAEb,IAAI,CAAChB,MAAM,IAAI,KAAK;YAC7B8B,SAAS,EAAEd,IAAI,CAAClB,IAAI,IAAI,KAAK;YAC7BiC,OAAO,EAAE,SAAS;YAClBC,WAAW,EAAE;UACf,CAAC,CAAC,CAAC;UACHC,SAAS,EAAE,CAAC;YACVC,MAAM,EAAE,iBAAiB;YACzBC,WAAW,EAAE,gBAAgB;YAC7BC,cAAc,EAAE;UAClB,CAAC,CAAC;UACFC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;UACzCC,cAAc,EAAE3B,kBAAkB,CAACtB,GAAG,CAAC2B,IAAI,KAAK;YAC9CuB,iBAAiB,EAAEvB,IAAI,CAACjB,aAAa,IAAI,SAAS;YAClDC,MAAM,EAAEgB,IAAI,CAAChB,MAAM,IAAI,SAAS;YAChCF,IAAI,EAAEkB,IAAI,CAAClB,IAAI,IAAI;UACrB,CAAC,CAAC,CAAC;UACH0C,SAAS,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;UACjCC,QAAQ,EAAE,CAAC;YACTC,KAAK,EAAE,eAAe;YACtBV,WAAW,EAAE,qBAAqB;YAClCW,YAAY,EAAE,CAAC,OAAO,EAAE,SAAS;UACnC,CAAC,CAAC;UACFC,mBAAmB,EAAE,CAAC;YACpBC,IAAI,EAAE,WAAW;YACjBC,YAAY,EAAE,kBAAkB;YAChCC,KAAK,EAAE,aAAa;YACpBf,WAAW,EAAE;UACf,CAAC;QACH;MACF,CAAC,CAAC;MAEFjE,QAAQ,CAAC,SAAS,EAAE;QAAEiF,KAAK,EAAE;UAAEC,eAAe,EAAE3B;QAAc;MAAE,CAAC,CAAC;IACpE,CAAC,CAAC,OAAO/C,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;IAEAX,eAAe,CAAC,KAAK,CAAC;IACtBE,WAAW,CAAC,GAAG,CAAC;EAClB,CAAC,EAAE,CAACP,aAAa,EAAEQ,QAAQ,CAAC,CAAC;EAE7B,oBACEX,OAAA;IAAK8F,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC/B/F,OAAA;MAAA+F,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjCnG,OAAA;MAAK8F,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1B/F,OAAA;QACEoG,IAAI,EAAC,MAAM;QACXC,QAAQ;QACRC,MAAM,EAAC,iBAAiB;QACxBC,QAAQ,EAAEjF;MAAiB;QAAA0E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC,eACFnG,OAAA;QAAQwG,OAAO,EAAEpD,YAAa;QAACqD,QAAQ,EAAElG,YAAa;QAAAwF,QAAA,EACnDxF,YAAY,GAAG,eAAe,GAAG;MAAQ;QAAAyF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EACL9F,IAAI,CAACgD,MAAM,GAAG,CAAC,iBACdrD,OAAA;MAAK8F,SAAS,EAAC,oBAAoB;MAAAC,QAAA,GAChC1F,IAAI,CAAC4B,GAAG,CAAE0B,GAAG,iBACZ3D,OAAA;QAAkB8F,SAAS,EAAC,KAAK;QAAAC,QAAA,gBAC/B/F,OAAA;UAAA+F,QAAA,EAAOpC,GAAG,CAAC3B;QAAI;UAAAgE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,EACtBxC,GAAG,CAACtB,OAAO,iBAAIrC,OAAA;UAAA+F,QAAA,EAAM;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,EACzCxC,GAAG,CAACvB,MAAM,iBAAIpC,OAAA;UAAA+F,QAAA,EAAM;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA,GAH7BxC,GAAG,CAACxB,EAAE;QAAA6D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIX,CACN,CAAC,eACFnG,OAAA;QAAK8F,SAAS,EAAC,cAAc;QAAAC,QAAA,eAC3B/F,OAAA;UACE8F,SAAS,EAAC,UAAU;UACpBY,KAAK,EAAE;YAAEC,KAAK,EAAE,GAAGlG,QAAQ;UAAI;QAAE;UAAAuF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjG,EAAA,CAlMID,iBAAiB;EAAA,QAKJL,WAAW;AAAA;AAAAgH,EAAA,GALxB3G,iBAAiB;AAoMvB,eAAeA,iBAAiB;AAAC,IAAA2G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}